graphics.off()
for (j in names(PIK3R1Junc)) {
jIdx <- which(JunctionExprs$junction==j)
barplot(c(sort(t(JunctionExprs[jIdx,TCGANValidate])),
sort(t(JunctionExprs[jIdx,TCGAHPVP])),
sort(t(JunctionExprs[jIdx,TCGAHPVN]))),las=2,
border=NA,col=rep(c('blue','green','red'),
c(length(TCGANValidate),length(TCGAHPVP),
length(TCGAHPVN))))
title(sprintf('%s (%s)',j,PIK3R1Junc[j]))
}
legend('topleft',fill=c('blue','green','red'),legend=c('N','HPV+','HPV-'))
# create plots for each junction by T/HPV+/HPV-
for (j in names(PIK3R1Junc)) {
jIdx <- which(JunctionExprs$junction==j)
barplot(c(sort(t(JunctionExprs[jIdx,TCGANValidate])),
sort(t(JunctionExprs[jIdx,TCGAHPVP])),
sort(t(JunctionExprs[jIdx,TCGAHPVN]))),las=2,
border=NA,col=rep(c('blue','green','red'),
c(length(TCGANValidate),length(TCGAHPVP),
length(TCGAHPVN))))
title(sprintf('%s (%s)',j,PIK3R1Junc[j]))
legend('topleft',fill=c('blue','green','red'),legend=c('N','HPV+','HPV-'))
}
pdf('~/Documents/Data/Hopkins_Analysis_Projects/Califano/HNSC_TCGA_SPLICE/8Jul2014/PIK3R1JunctionExprsByHPV.pdf')
for (j in names(PIK3R1Junc)) {
jIdx <- which(JunctionExprs$junction==j)
barplot(c(sort(t(JunctionExprs[jIdx,TCGANValidate])),
sort(t(JunctionExprs[jIdx,TCGAHPVP])),
sort(t(JunctionExprs[jIdx,TCGAHPVN]))),las=2,
border=NA,col=rep(c('blue','green','red'),
c(length(TCGANValidate),length(TCGAHPVP),
length(TCGAHPVN))))
title(sprintf('%s (%s)',j,PIK3R1Junc[j]))
legend('topleft',fill=c('blue','green','red'),legend=c('N','HPV+','HPV-'))
}
dev.off()
source('~/Documents/Data/Hopkins_Analysis_Projects/Califano/HNSC_TCGA_SPLICE/8Jul2014/HNSC_PIK3R1_NormalizeJunctionPlots.R', echo=TRUE)
?file.rename
q()
data(esoph)
colnames(esoph)
esophp[,'alcgp']
esoph[,'alcgp']
View(esoph)
esoph[1,1]
esoph[1,'agegp']
esoph[1:10,'agegp']
esoph[,'agegp']
esoph$'agegp'
esoph$'agegp'
class(esoph)
list(a=c(1,2),b=c('a','b'),c=c(1:3))
list(a=c(1,2),b=c('a','b'),c=c(1:3)) -> x
x
x[['a']]
x$'a'
esoph$agegp
esoph[esoph$agegp=='25-34',]
esoph[esoph$agegp=='25-34','tobgp']
table(esoph[esoph$agegp=='25-34','tobgp']
)
table(esoph[esoph$agegp=='25-34' | esoph$agegp=='35-44','tobgp'])
table(esoph$agegp,esoph$tobgp)
esoph.age.tob.counts <- table(esoph$agegp,esoph$tobgp)
esoph.age.tob.counts
esoph.age.tob.counts[1:4,]
esoph.age.tob.counts[c('25-34','35-44','45-54'),]
junctionFile <- '~/Documents/Data/Hopkins_Analysis_Projects/Califano/HNSC_TCGA_SPLICE/gdac.broadinstitute.org_HNSC.Merge_rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__junction_quantification__data.Level_3.2014061400.0.0/HNSC.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__junction_quantification__data.data.txt'
JunctionExprs <- read.table(junctionFile,
header=T,sep="\t",stringsAsFactors=F)
?scale
q()
install.packages("~/Desktop/OGSA.zip", repos = NULL)
install.packages("~/Desktop/OGSA.zip", repos = NULL, target='source')
install.packages("~/Desktop/OGSA", repos = NULL, target='source')
install.packages("~/Desktop/OGSA", repos = NULL)
install.packages("~/Desktop/OGSA", repos = NULL)
?install.packages
library('xlsx')
library('CoGAPS')
library('limma')
library('simpleaffy')
library('ClassDiscovery')
library('sva')
strReverse <- function(x)
sapply(lapply(strsplit(x, NULL), rev), paste, collapse="")
CtxData <- read.xlsx('total.xlsx',sheetName='total-Intensity',startRow=2)
row.names(CtxData) <- make.names(CtxData[,1], unique=T)
CtxData <- data.matrix(CtxData[,2:ncol(CtxData)])
rm(list=ls())
install.packages('Rcpp')
q()
40/8
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
library('cgdsr')
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
getCancerStudies(mycgds)
getCancerStudies(mycgds)[,1]
blca <- blca_tcga_pub
blca <- 'blca_tcga_pub'
lung <- 'lusc_tcga_pub'
getCaseLists(mycgds,blca)
getCaseLists(mycgds,blca)[,1]
View( getCaseLists(mycgds,blca))
getGeneticProfiles(mycgds,blca)
View(getGeneticProfiles(mycgds,blca)
)
blcaCase <- 'blca_tcga_pub_all'
blca.mut <- getProfileData(mycgds,'blca_tcga_pub_mutations',blcaCase)
blca.mut
blca.mut <- getProfileData(mycgds,'PIK3CA','blca_tcga_pub_mutations',blcaCase)
blca.mut
getCaseLists(mycgds,lung)
View(getCaseLists(mycgds,lung)
)
lungCase <- 'lusc_tcga_pub_all'
lung.mut <- getProfileData(mycgds,'PIK3CA','lusc_tcga_pub_mutations',lungCase)
lung.mut
PI3K <- c('PIK3CA')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
lung.mut <- getProfileData(mycgds,PI3K,'lusc_tcga_pub_mutations',lungCase)
blca.mut
lung.mut
PI3K <- c('PIK3CA','EGFR', 'HER2', 'HER3', 'HER4',
'IGF1R','IRS1','IRS2','IRS3','IRS4','MET')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
lung.mut <- getProfileData(mycgds,PI3K,'lusc_tcga_pub_mutations',lungCase)
blca.mut
ncol(blca.mut)
length(PI3K)
setdiff(PI3K,colnames(blca.mut))
setdiff(colnames(blca.mut),'PI3K')
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS3','IRS4','MET')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
lung.mut <- getProfileData(mycgds,PI3K,'lusc_tcga_pub_mutations',lungCase)
ncol(blca.mut)
setdiff(colnames(blca.mut),'PI3K')
setdiff(colnames(blca.mut),PI3K)
setdiff(PI3K,colnames(blca.mut))
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS3','IRS4','MET',
'PIK3R1', 'PIK3R2', 'PTEN', 'PDK1', 'AKT',
'TSC1', 'TSC2', 'LKB1', 'AMPK', 'RHEB')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
setdiff(PI3K,colnames(blca.mut))
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS3','IRS4','MET',
'PIK3R1', 'PIK3R2', 'PTEN', 'PDK1', 'AKT1','AKT2','AKT3',
'TSC1', 'TSC2', 'LKB1', 'AMPK', 'RHEB')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
setdiff(PI3K,colnames(blca.mut))
# set up members of the PI3K pathway
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS3','IRS4','MET',
'PIK3R1', 'PIK3R2', 'PTEN', 'PDK1', 'AKT1','AKT2','AKT3',
'TSC1', 'TSC2', 'STK11', 'AMPK', 'RHEB')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
setdiff(PI3K,colnames(blca.mut))
# set up members of the PI3K pathway
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS3','IRS4','MET',
'PIK3R1', 'PIK3R2', 'PTEN', 'PDK1', 'AKT1','AKT2','AKT3',
'TSC1', 'TSC2', 'STK11', 'AMPK', 'RHEB',
'FOXO1', 'FOXO3', 'GSK3B', 'BCL2L11', 'BAX', 'CASP9',
'MDM2', 'LMNA', 'MAP3K8', 'NOS3', 'HTT', 'PFKFB2', 'PIKFYVE',
'TBC1D4', 'TBC1D4', 'CDKN1B', 'MYT1', 'WEE1', 'BAD', 'MTOR',
'RPTOR', 'RICTOR', 'RPS6KB1', 'RPS6', 'EIF4EBP1', 'EIF4E')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
length(PI3K)
ncol(blca.mut)
setdiff(PI3K,colnames(blca.mut))
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS3','IRS4','MET',
'PIK3R1', 'PIK3R2', 'PTEN', 'PDK1', 'AKT1','AKT2','AKT3',
'TSC1', 'TSC2', 'STK11', 'PRKAA1', 'RHEB',
'FOXO1', 'FOXO3', 'GSK3B', 'BCL2L11', 'BAX', 'CASP9',
'MDM2', 'LMNA', 'MAP3K8', 'NOS3', 'HTT', 'PFKFB2', 'PIKFYVE',
'TBC1D4', 'TBC1D4', 'CDKN1B', 'MYT1', 'WEE1', 'BAD', 'MTOR',
'RPTOR', 'RICTOR', 'RPS6KB1', 'RPS6', 'EIF4EBP1', 'EIF4E')
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
setdiff(PI3K,colnames(blca.mut))
lung.mut <- getProfileData(mycgds,PI3K,'lusc_tcga_pub_mutations',lungCase)
ncol(lung.met)
ncol(lung.mut)
length(PI3K)
# set up members of the PI3K pathway
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS4','MET',
'PIK3R1', 'PIK3R2', 'PTEN', 'PDK1', 'AKT1','AKT2','AKT3',
'TSC1', 'TSC2', 'STK11', 'PRKAA1', 'RHEB',
'FOXO1', 'FOXO3', 'GSK3B', 'BCL2L11', 'BAX', 'CASP9',
'MDM2', 'LMNA', 'MAP3K8', 'NOS3', 'HTT', 'PFKFB2', 'PIKFYVE',
'TBC1D4', 'TBC1D4', 'CDKN1B', 'MYT1', 'WEE1', 'BAD', 'MTOR',
'RPTOR', 'RICTOR', 'RPS6KB1', 'RPS6', 'EIF4EBP1', 'EIF4E')
# get mutation information
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
lung.mut <- getProfileData(mycgds,PI3K,'lusc_tcga_pub_mutations',lungCase)
setdiff(PI3K,colnames(blca.mut))
setdiff(PI3K,colnames(lung.mut))
setdiff(colnames(lung.mut),PI3K)
# set up members of the PI3K pathway
PI3K <- c('PIK3CA','EGFR', 'ERBB2', 'ERBB3', 'ERBB4',
'IGF1R','IRS1','IRS2','IRS4','MET',
'PIK3R1', 'PIK3R2', 'PTEN', 'PDK1', 'AKT1','AKT2','AKT3',
'TSC1', 'TSC2', 'STK11', 'PRKAA1', 'RHEB',
'FOXO1', 'FOXO3', 'GSK3B', 'BCL2L11', 'BAX', 'CASP9',
'MDM2', 'LMNA', 'MAP3K8', 'NOS3', 'HTT', 'PFKFB2', 'PIKFYVE',
'TBC1D4', 'CDKN1B', 'MYT1', 'WEE1', 'BAD', 'MTOR',
'RPTOR', 'RICTOR', 'RPS6KB1', 'RPS6', 'EIF4EBP1', 'EIF4E')
lung.mut <- getProfileData(mycgds,PI3K,'lusc_tcga_pub_mutations',lungCase)
blca.mut <- getProfileData(mycgds,PI3K,'blca_tcga_pub_mutations',blcaCase)
ncol(lung.mut)
ncol(blca.mut)
length(PI3K)
getGeneticProfiles(mycgds,blca)
getGeneticProfiles(mycgds,blca)[,1]
blca.mut
View(blca.mut
)
getGeneticProfiles(mycgds,blca)[,1]
blca.cnv <- getProfileData(mycgds,PI3K,'blca_tcga_pub_gistic',blcaCase)
lung.cnv <- getProfileData(mycgds,PI3K,'lusc_tcga_pub_gistic',lungCase)
blca.cnv
lung.cnv
q()
rm(list=ls())
load("/Users/ejfertig/Documents/Data/Weiner/CetuximabTimeCourse/Output Data_Tang_Weiner_anti-EGFR_2013/FertigAnalysis/CoGAPSV2Results_TFGene.Rda")
for (i in 1:5) {
plot(as.numeric(substr(colnames(nP5$PMean),1,2)),
nP5$PMean[i,], col=ifelse(substr(colnames(nP5$PMean),4,5)=='Ce','red','black'),
pch=ifelse(substr(colnames(nP5$PMean),4,5)=='Ce',19,1),
xlab='Time Pt', ylab = sprintf('Pattern %d',i))
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP5$PMean[i,Ctx]~as.numeric(substr(Ctx,1,2))),
seq(from=8,to=14,by=0.1)),col='red')
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP5$PMean[i,Ctl]~as.numeric(substr(Ctl,1,2))),
seq(from=8,to=14,by=0.1)),col='black',lty=2)
}
Ctx <- grep('Cet',colnames(nP3$PMean),value=T)
Ctl <- grep('Control',colnames(nP3$PMean),value=T)
plot(nP3$ChiSqValues,col=rep(c('red','black'),each=50000),ylim=c(0,1e5))
graphics.off()
for (i in 1:5) {
plot(as.numeric(substr(colnames(nP5$PMean),1,2)),
nP5$PMean[i,], col=ifelse(substr(colnames(nP5$PMean),4,5)=='Ce','red','black'),
pch=ifelse(substr(colnames(nP5$PMean),4,5)=='Ce',19,1),
xlab='Time Pt', ylab = sprintf('Pattern %d',i))
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP5$PMean[i,Ctx]~as.numeric(substr(Ctx,1,2))),
seq(from=8,to=14,by=0.1)),col='red')
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP5$PMean[i,Ctl]~as.numeric(substr(Ctl,1,2))),
seq(from=8,to=14,by=0.1)),col='black',lty=2)
}
for (i in 1:3) {
plot(as.numeric(substr(colnames(nP3$PMean),1,2)),
nP3$PMean[i,], col=ifelse(substr(colnames(nP3$PMean),4,5)=='Ce','red','black'),
pch=ifelse(substr(colnames(nP3$PMean),4,5)=='Ce',19,1),
xlab='Time Pt', ylab = sprintf('Pattern %d',i))
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP3$PMean[i,Ctx]~as.numeric(substr(Ctx,1,2))),
seq(from=8,to=14,by=0.1)),col='red')
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP3$PMean[i,Ctl]~as.numeric(substr(Ctl,1,2))),
seq(from=8,to=14,by=0.1)),col='black',lty=2)
}
graphics.off()
for (i in 1:4) {
plot(as.numeric(substr(colnames(nP4$PMean),1,2)),
nP4$PMean[i,], col=ifelse(substr(colnames(nP4$PMean),4,5)=='Ce','red','black'),
pch=ifelse(substr(colnames(nP4$PMean),4,5)=='Ce',19,1),
xlab='Time Pt', ylab = sprintf('Pattern %d',i))
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP4$PMean[i,Ctx]~as.numeric(substr(Ctx,1,2))),
seq(from=8,to=14,by=0.1)),col='red')
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP4$PMean[i,Ctl]~as.numeric(substr(Ctl,1,2))),
seq(from=8,to=14,by=0.1)),col='black',lty=2)
}
graphics.off()
for (i in 1:5) {
plot(as.numeric(substr(colnames(nP5$PMean),1,2)),
nP5$PMean[i,], col=ifelse(substr(colnames(nP5$PMean),4,5)=='Ce','red','black'),
pch=ifelse(substr(colnames(nP5$PMean),4,5)=='Ce',19,1),
xlab='Time Pt', ylab = sprintf('Pattern %d',i))
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP5$PMean[i,Ctx]~as.numeric(substr(Ctx,1,2))),
seq(from=8,to=14,by=0.1)),col='red')
lines(seq(from=8,to=14,by=0.1),
predict(loess(nP5$PMean[i,Ctl]~as.numeric(substr(Ctl,1,2))),
seq(from=8,to=14,by=0.1)),col='black',lty=2)
}
load("/Users/ejfertig/Dropbox/SpliceVariantCalifano/PIK3R1_JunctionPlots_8Jul2014/LUSC_OGSA_2Sept2014data.RData")
ls()
LUSCData
summary(LUSCData)
exprLUSC
class(exprLUSC)
data.matrix(exprLUSC)
class(exprLUSC[1,1])
LUSCData
class(LUSCData)
class(LUSCData$junction
)
class(LUSCData$junction1)
class(LUSCData$junction.1)
class(LUSCData$chr5.67511777...chr5.67522118..)
t(LUSCData[,3:6])
class(t(LUSCData[,3:6])
)
t(LUSCData[,3:6]) -> x
x[,1]
class(x[1,])
class(x[,1])
x
t(LUSCData[,3:6]) -> x
dim(x)
R.home(component = "home")
library('CoGAPS')
data('SimpSim')
FP <- SimpSim.P[1:2,]
nIter <- 5000
results <- gapsMapRun(D=SimpSim.D,S=SimpSim.S,FP=FP,nFactor = 3,nEquil = nIter, nSample = nIter)
results
names(results)
mapP <- matrix(nrow=2,ncol=20)
mapP[1,1:10] <- 1
mapP[2,11:20] <- 1
testmap <- gapsMapRun(SimpSim.D, SimpSim.S, mapP,
nFactor=3,nEquil = 1000,nSample = 1000)
testmap <- gapsMapRun(SimpSim.D, SimpSim.S, FP=mapP,
nFactor=3,nEquil = 1000,nSample = 1000)
mapP
mapP <- matrix(0,nrow=2,ncol=20)
mapP[1,1:10] <- 1
mapP[2,11:20] <- 1
testmap <- gapsMapRun(SimpSim.D, SimpSim.S, FP=mapP,
nFactor=3,nEquil = 1000,nSample = 1000)
testmap
testmap$Pmean[2:3,] - sweep(mapP,1,apply(mapP,1,sum),FUN="/")
summary(t(testmap$Pmean[2:3,] - sweep(mapP,1,apply(mapP,1,sum),FUN="/")
))
summary(t(testmap$Pmean[2:3,] - sweep(mapP,1,apply(mapP,1,sum),FUN="/")))
library('CoGAPS')
?gapsMapRun
q()
(249 + 231)/2
.9*249
(249 + 231)/4
(249 + 231)/2
(249/4 + 3*231/4)
(249/3 + 2*231/3)
?mcapply
?mapply
?for
{}
?Control
help.start()
if <- 5
states
state.abb
for (s in state.abb) {
message(s)
}
for (s in state.abb) {
message(s)
}
for (s in 1:length(state.abb)) {
message(state.abb[i])
}
for (i in 1:length(state.abb)) {
message(state.abb[i])
}
s <- state.abb[1]
message(s)
s <- state.abb[1]
#for (s in state.abb) {
message(s)
#}
for (s in state.abb) {
message(s)
for (i in 1:5) {
message(i)
} # end of the for loop over the variable i
}
?if
?Control
for (s in state.abb) {
message(s)
for (i in 1:5)
message(i)
# end of the for loop over the variable i
}
for (s in state.abb)
message(s)
for (i in 1:5)
message(i)
# end of the for loop over the variable i
i <- 0
repeat {
message(i)
if (i >5) {
break
}
i <- i + 1
message('going to next step in the loop')
}
repeat {
message(i)
if (i >5) {
break
}
i <- i + 1
message('going to next step in the loop')
}
i <- 0
repeat {
message(i)
if (i >5) {
break
}
i <- i + 1
message('going to next step in the loop')
}
i <- 0
repeat {
message(i)
if (i >5) {
break
}
i <- i + 1
message('going to next step in the loop')
}
cars$speed
cars[,'speed']
message(cars[1,'speed'])
i <- 1
message(cars[i,'speed'])
i <- 1
repeat {
message(i)
# add a message for the speed of a car
if (i >5) {
break
}
i <- i + 1
message('going to next step in the loop')
}
i <- 1
repeat {
#message(i)
# add a message for the speed of a car
message(cars[i,'speed'])
if (i >4) {
break
}
i <- i + 1
message('going to next step in the loop')
}
i <- 1
message(cars[i,'speed'])
while (i <= 5) {
message(cars[i,'speed'])
i <- i + 1
}
i <- 1
while (i <= 5) {
message(cars[i,'speed'])
i <- i + 1
}
for (i in 1:5) {
message(cars[i,'speed'])
}
i==3
i = 3
i
if (i=3) {
1:2 | 4:5
1:5
1:5
1:2 | 4:5
for (i in c(1,2,4,5)) {
message(cars[i,'speed'])
}
rowsSelect <- c(1:2,4:5)
for (i in rowsSelect) {
message(cars[i,'speed'])
}
mean(cars[rowsSelect,'dist'])
# initialize the mean value
m <- 0
# add up the total distance of all the cars
for (i in rowsSelect) {
m <- m + cars[i,'dist']
}
# divide by the number of the cars considered
m <- m / length(rowsSelect)
m
if (0 > 1) {
'blah' }
rm(i)
repeat {
message(i)
if (i >5) {
break
}
i <- i + 1
message('going to next step in the loop')
}
